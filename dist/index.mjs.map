{"version":3,"sources":["../src/services/authorization.ts","../src/services/generateInvoice.ts","../src/utils/utils.ts","../src/services/reception.ts","../src/services/signing.ts"],"sourcesContent":["import { createClient, Client } from \"soap\";\r\n\r\nexport async function documentAuthorization(\r\n  accesKey: string,\r\n  authorizationUrl: string\r\n) {\r\n  let params = { claveAccesoComprobante: accesKey };\r\n\r\n  let authorizationResponse: any;\r\n\r\n  const authorizationRequest = new Promise((resolve, reject) => {\r\n    createClient(authorizationUrl, (err: any, client: Client) => {\r\n      client.autorizacionComprobante(params, (err: any, result: unknown) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(result);\r\n      });\r\n    });\r\n  });\r\n\r\n  authorizationResponse = await authorizationRequest;\r\n\r\n  return authorizationResponse;\r\n}\r\n","import { create } from \"xmlbuilder2\";\r\nimport { Invoice, InvoiceInput } from \"../baseData/invoice/invoice\";\r\nimport { generateAccessKey } from \"../utils/utils\";\r\nimport { TaxInfo } from \"../baseData/invoice/taxInfo\";\r\n\r\nfunction parseDateFromDDMMYYYY(dateString: string): Date {\r\n  const [day, month, year] = dateString.split(\"/\").map(Number);\r\n  const date = new Date(year, month - 1, day);\r\n\r\n  if (isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date format or value. Expected format: DD/MM/YYYY\");\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nfunction reorderTaxInfo(taxInfo: TaxInfo): TaxInfo {\r\n  return {\r\n    ambiente: taxInfo.ambiente,\r\n    tipoEmision: taxInfo.tipoEmision,\r\n    razonSocial: taxInfo.razonSocial,\r\n    nombreComercial: taxInfo.nombreComercial,\r\n    ruc: taxInfo.ruc,\r\n    claveAcceso: taxInfo.claveAcceso,\r\n    codDoc: taxInfo.codDoc,\r\n    estab: taxInfo.estab,\r\n    ptoEmi: taxInfo.ptoEmi,\r\n    secuencial: taxInfo.secuencial,\r\n    dirMatriz: taxInfo.dirMatriz,\r\n    regimenMicroempresas: taxInfo.regimenMicroempresas,\r\n    agenteRetencion: taxInfo.agenteRetencion,\r\n    contribuyenteRimpe: taxInfo.contribuyenteRimpe,\r\n  };\r\n}\r\n\r\nexport function generateInvoiceXml(invoice: Invoice) {\r\n  const document = create(invoice);\r\n  const xml = document.end({ prettyPrint: true });\r\n  return xml;\r\n}\r\n\r\nexport function generateInvoice(invoiceData: InvoiceInput) {\r\n  const accessKey = generateAccessKey({\r\n    date: parseDateFromDDMMYYYY(invoiceData.infoFactura.fechaEmision),\r\n    codDoc: invoiceData.infoTributaria.codDoc,\r\n    ruc: invoiceData.infoTributaria.ruc,\r\n    environment: invoiceData.infoTributaria.ambiente,\r\n    establishment: invoiceData.infoTributaria.estab,\r\n    emissionPoint: invoiceData.infoTributaria.ptoEmi,\r\n    sequential: invoiceData.infoTributaria.secuencial,\r\n  });\r\n\r\n  const infoTributariaData = { ...invoiceData.infoTributaria, claveAcceso: accessKey };\r\n\r\n  const invoice: Invoice = {\r\n    factura: {\r\n      \"@xmlns:ds\": \"http://www.w3.org/2000/09/xmldsig#\",\r\n      \"@xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\r\n      \"@id\": \"comprobante\",\r\n      \"@version\": \"1.0.0\",\r\n      infoTributaria: reorderTaxInfo(infoTributariaData),\r\n      infoFactura: invoiceData.infoFactura,\r\n      detalles: invoiceData.detalles,\r\n    },\r\n  };\r\n\r\n  return { invoice, accessKey };\r\n}\r\n","export type GenerateAccessKey = {\r\n  date: Date;\r\n  /*\r\n  FACTURA 01\r\n  LIQUIDACIÓN DE COMPRA DE\r\n  BIENES Y PRESTACIÓN DE\r\n  SERVICIOS 03\r\n  NOTA DE CRÉDITO 04\r\n  NOTA DE DÉBITO 05\r\n  GUÍA DE REMISIÓN 06\r\n  COMPROBANTE DE RETENCIÓN 07\r\n  */\r\n  codDoc: \"01\" | \"03\" | \"04\" | \"05\" | \"06\" | \"07\";\r\n  ruc: string;\r\n  environment: \"1\" | \"2\";\r\n  establishment: string;\r\n  emissionPoint: string;\r\n  sequential: string;\r\n};\r\n\r\nexport function generateAccessKey(accessKeyData: GenerateAccessKey) {\r\n  let accessKey = \"\";\r\n  accessKey += formatDateToDDMMYYYY(accessKeyData.date); // Fecha de emisión\r\n  accessKey += accessKeyData.codDoc; // Tipo de comprobante\r\n  accessKey += accessKeyData.ruc; // Número de RUC\r\n  accessKey += accessKeyData.environment; // Tipo de ambiente\r\n  accessKey += accessKeyData.establishment; // Establecimiento\r\n  accessKey += accessKeyData.emissionPoint; // Punto de emision\r\n  accessKey += accessKeyData.sequential; // Secuencial\r\n  accessKey += generateRandomEightDigitNumber(); // Código numérico\r\n  accessKey += \"1\"; // Tipo de emisión\r\n  accessKey += generateVerificatorDigit(accessKey); // Dígito verificador\r\n  return accessKey;\r\n}\r\n\r\nfunction formatDateToDDMMYYYY(date: Date): string {\r\n  const day = String(date.getDate()).padStart(2, \"0\"); // Día con cero a la izquierda\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Mes con cero a la izquierda\r\n  const year = date.getFullYear(); // Año completo (4 dígitos)\r\n\r\n  return `${day}${month}${year}`;\r\n}\r\n\r\nfunction generateRandomEightDigitNumber(): number {\r\n  const min = 10000000;\r\n  const max = 99999999;\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction generateVerificatorDigit(accessKey: string) {\r\n  const weights = [2, 3, 4, 5, 6, 7]; // Pesos cíclicos estándar\r\n  const digits = accessKey.split(\"\").map(Number); // Convertir a un array de dígitos\r\n\r\n  // Validar que todos los caracteres sean numéricos\r\n  if (digits.some(isNaN)) {\r\n    throw new Error(\"Invalid access key. Must contain only digits.\");\r\n  }\r\n\r\n  // Calcular la suma ponderada\r\n  const total = digits\r\n    .reverse() // Procesar de derecha a izquierda\r\n    .map((digit, index) => digit * weights[index % weights.length]) // Multiplicar por pesos\r\n    .reduce((sum, value) => sum + value, 0); // Sumar los productos\r\n\r\n  // Calcular el residuo\r\n  const remainder = total % 11;\r\n\r\n  // Calcular el dígito verificador\r\n  let verifier = 11 - remainder;\r\n\r\n  // Ajustar casos especiales\r\n  if (verifier === 10) verifier = 1;\r\n  if (verifier === 11) verifier = 0;\r\n\r\n  return verifier;\r\n}\r\n","import { createClient, Client } from \"soap\";\r\n\r\nexport async function documentReception(\r\n  stringXML: string,\r\n  receptionUrl: string\r\n): Promise<any> {\r\n  const base64XML = Buffer.from(stringXML).toString(\"base64\");\r\n  let params = { xml: base64XML };\r\n\r\n  let receptionResult: any;\r\n\r\n  const receptionRequest = new Promise((resolve, reject) => {\r\n    createClient(receptionUrl, (err, client: Client) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      client.validarComprobante(params, (err: any, result: unknown) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(result);\r\n      });\r\n    });\r\n  });\r\n\r\n  receptionResult = await receptionRequest;\r\n  return receptionResult;\r\n}\r\n","import * as forge from \"node-forge\";\r\nimport { readFileSync } from \"fs\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport function getP12FromLocalFile(path: string) {\r\n  const file = readFileSync(path);\r\n  const buffer = file.buffer.slice(file.byteOffset, file.byteOffset + file.byteLength);\r\n  return buffer;\r\n}\r\n\r\nexport async function getP12FromUrl(url: string) {\r\n  const file = await fetch(url)\r\n    .then((response) => response.arrayBuffer())\r\n    .then((data) => data);\r\n  return file;\r\n}\r\n\r\nexport function getXMLFromLocalFile(path: string) {\r\n  const file = readFileSync(path, \"utf8\");\r\n  return file;\r\n}\r\n\r\nexport async function getXMLFromLocalUrl(url: string) {\r\n  const file = await fetch(url)\r\n    .then((response) => response.text())\r\n    .then((data) => data);\r\n  return file;\r\n}\r\n\r\nfunction sha1Base64(text: string, encoding: forge.Encoding = \"utf8\") {\r\n  const md = forge.md.sha1.create();\r\n  md.update(text, encoding);\r\n  const hash = md.digest().toHex();\r\n  const buffer = Buffer.from(hash, \"hex\");\r\n  const base64 = buffer.toString(\"base64\");\r\n  return base64;\r\n}\r\n\r\nfunction hexToBase64(hex: string) {\r\n  hex = hex.padStart(hex.length + (hex.length % 2), \"0\");\r\n  const bytes = hex.match(/.{2}/g)!.map((byte) => parseInt(byte, 16));\r\n  return btoa(String.fromCharCode(...bytes));\r\n}\r\n\r\nfunction bigIntToBase64(bigInt: forge.jsbn.BigInteger) {\r\n  const hex = bigInt.toString(16);\r\n  const hexPairs = hex.match(/\\w{2}/g);\r\n  const bytes = hexPairs!.map((pair) => parseInt(pair, 16));\r\n  const byteString = String.fromCharCode(...bytes);\r\n  const base64 = btoa(byteString);\r\n  return base64.match(/.{1,76}/g)!.join(\"\\n\");\r\n}\r\n\r\nfunction getRandomNumber(min = 990, max = 9999) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function processP12(p12Data: ArrayBuffer, password: string) {\r\n  const arrayUint8 = new Uint8Array(p12Data);\r\n  const base64 = forge.util.binary.base64.encode(arrayUint8);\r\n  const der = forge.util.decode64(base64);\r\n\r\n  const asn1 = forge.asn1.fromDer(der);\r\n  const p12 = forge.pkcs12.pkcs12FromAsn1(asn1, password);\r\n\r\n  const certBags = p12.getBags({ bagType: forge.pki.oids.certBag });\r\n  const pkcs8Bags = p12.getBags({ bagType: forge.pki.oids.pkcs8ShroudedKeyBag });\r\n\r\n  const certBag = certBags[forge.pki.oids.certBag]?.[0];\r\n  const pkcs8Bag = pkcs8Bags[forge.pki.oids.pkcs8ShroudedKeyBag]?.[0];\r\n\r\n  if (!certBag || !pkcs8Bag) {\r\n    throw new Error(\"No certificates or private keys found in the P12 file.\");\r\n  }\r\n\r\n  const certificate = certBag.cert as forge.pki.Certificate;\r\n  const privateKey = pkcs8Bag.key as forge.pki.rsa.PrivateKey;\r\n  const issuerName = certificate.issuer.attributes.map((attr) => `${attr.shortName}=${attr.value}`).join(\", \");\r\n\r\n  const certificatePem = forge.pki.certificateToPem(certificate);\r\n\r\n  const currentDate = new Date();\r\n  if (currentDate < certificate.validity.notBefore || currentDate > certificate.validity.notAfter) {\r\n    throw new Error(\"Certificate is not valid.\");\r\n  }\r\n\r\n  return {\r\n    certificate,\r\n    privateKey,\r\n    issuerName,\r\n    certificatePem,\r\n  };\r\n}\r\n\r\nexport async function signXml(p12Data: ArrayBuffer, p12Password: string, xmlData: string) {\r\n  const certificateData = processP12(p12Data, p12Password);\r\n\r\n  const { certificate, privateKey, issuerName, certificatePem } = certificateData;\r\n\r\n  const xmlDigest = sha1Base64(xmlData.trim());\r\n\r\n  const certificateDer = forge.asn1.toDer(forge.pki.certificateToAsn1(certificate)).getBytes();\r\n  const certDigest = sha1Base64(certificateDer, \"utf8\");\r\n\r\n  const signedProperties = `\r\n    <etsi:SignedProperties xmlns:etsi=\"http://uri.etsi.org/01903/v1.3.2#\" Id=\"SignedProperties123\">\r\n      <etsi:SignedSignatureProperties>\r\n        <etsi:SigningTime>${new Date().toISOString()}</etsi:SigningTime>\r\n        <etsi:SigningCertificate>\r\n          <etsi:Cert>\r\n            <etsi:CertDigest>\r\n              <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\r\n              <ds:DigestValue>${certDigest}</ds:DigestValue>\r\n            </etsi:CertDigest>\r\n            <etsi:IssuerSerial>\r\n              <ds:X509IssuerName>${issuerName}</ds:X509IssuerName>\r\n              <ds:X509SerialNumber>${parseInt(certificate.serialNumber, 16)}</ds:X509SerialNumber>\r\n            </etsi:IssuerSerial>\r\n          </etsi:Cert>\r\n        </etsi:SigningCertificate>\r\n      </etsi:SignedSignatureProperties>\r\n    </etsi:SignedProperties>\r\n  `.trim();\r\n\r\n  const signedPropertiesDigest = sha1Base64(signedProperties.trim());\r\n\r\n  const signedInfo = `\r\n    <ds:SignedInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n      <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\r\n      <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\r\n      <ds:Reference URI=\"#SignedProperties123\">\r\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\r\n        <ds:DigestValue>${signedPropertiesDigest}</ds:DigestValue>\r\n      </ds:Reference>\r\n      <ds:Reference URI=\"\">\r\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\r\n        <ds:DigestValue>${xmlDigest}</ds:DigestValue>\r\n      </ds:Reference>\r\n    </ds:SignedInfo>\r\n  `.trim();\r\n\r\n  const signature = forge.util.encode64(privateKey.sign(forge.md.sha1.create().update(signedInfo, \"utf8\")));\r\n\r\n  const keyInfo = `\r\n    <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n      <ds:X509Data>\r\n        <ds:X509Certificate>${certificatePem.replace(/-----[A-Z]+ CERTIFICATE-----|\\n/g, \"\")}</ds:X509Certificate>\r\n      </ds:X509Data>\r\n    </ds:KeyInfo>\r\n  `.trim();\r\n\r\n  const signatureXml = `\r\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n      ${signedInfo}\r\n      <ds:SignatureValue>${signature}</ds:SignatureValue>\r\n      ${keyInfo}\r\n      <ds:Object>\r\n        ${signedProperties}\r\n      </ds:Object>\r\n    </ds:Signature>\r\n  `.trim();\r\n\r\n  return xmlData.replace(/<\\/factura>/, `${signatureXml}</factura>`);\r\n}\r\n"],"mappings":"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","names":["err","taxInfo","createClient","err","md","asn1"]}