{"version":3,"sources":["../src/services/authorization.ts","../src/services/generateInvoice.ts","../src/utils/utils.ts","../src/services/reception.ts","../src/services/signing.ts"],"sourcesContent":["import { createClient, Client } from \"soap\";\r\n\r\nexport async function documentAuthorization(\r\n  accesKey: string,\r\n  authorizationUrl: string\r\n) {\r\n  let params = { claveAccesoComprobante: accesKey };\r\n\r\n  let authorizationResponse: any;\r\n\r\n  const authorizationRequest = new Promise((resolve, reject) => {\r\n    createClient(authorizationUrl, (err: any, client: Client) => {\r\n      client.autorizacionComprobante(params, (err: any, result: unknown) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(result);\r\n      });\r\n    });\r\n  });\r\n\r\n  authorizationResponse = await authorizationRequest;\r\n\r\n  return authorizationResponse;\r\n}\r\n","import { create } from \"xmlbuilder2\";\r\nimport { Invoice, InvoiceInput } from \"../baseData/invoice/invoice\";\r\nimport { generateAccessKey } from \"../utils/utils\";\r\nimport { TaxInfo } from \"../baseData/invoice/taxInfo\";\r\n\r\nfunction parseDateFromDDMMYYYY(dateString: string): Date {\r\n  const [day, month, year] = dateString.split(\"/\").map(Number);\r\n  const date = new Date(year, month - 1, day);\r\n\r\n  if (isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date format or value. Expected format: DD/MM/YYYY\");\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nfunction reorderTaxInfo(taxInfo: TaxInfo): TaxInfo {\r\n  return {\r\n    ambiente: taxInfo.ambiente,\r\n    tipoEmision: taxInfo.tipoEmision,\r\n    razonSocial: taxInfo.razonSocial,\r\n    nombreComercial: taxInfo.nombreComercial,\r\n    ruc: taxInfo.ruc,\r\n    claveAcceso: taxInfo.claveAcceso,\r\n    codDoc: taxInfo.codDoc,\r\n    estab: taxInfo.estab,\r\n    ptoEmi: taxInfo.ptoEmi,\r\n    secuencial: taxInfo.secuencial,\r\n    dirMatriz: taxInfo.dirMatriz,\r\n    regimenMicroempresas: taxInfo.regimenMicroempresas,\r\n    agenteRetencion: taxInfo.agenteRetencion,\r\n    contribuyenteRimpe: taxInfo.contribuyenteRimpe,\r\n  };\r\n}\r\n\r\nexport function generateInvoiceXml(invoice: Invoice) {\r\n  const document = create(invoice);\r\n  const xml = document.end({ prettyPrint: true });\r\n  return xml;\r\n}\r\n\r\nexport function generateInvoice(invoiceData: InvoiceInput) {\r\n  const accessKey = generateAccessKey({\r\n    date: parseDateFromDDMMYYYY(invoiceData.infoFactura.fechaEmision),\r\n    codDoc: invoiceData.infoTributaria.codDoc,\r\n    ruc: invoiceData.infoTributaria.ruc,\r\n    environment: invoiceData.infoTributaria.ambiente,\r\n    establishment: invoiceData.infoTributaria.estab,\r\n    emissionPoint: invoiceData.infoTributaria.ptoEmi,\r\n    sequential: invoiceData.infoTributaria.secuencial,\r\n  });\r\n\r\n  const infoTributariaData = { ...invoiceData.infoTributaria, claveAcceso: accessKey };\r\n\r\n  const invoice: Invoice = {\r\n    factura: {\r\n      \"@xmlns:ds\": \"http://www.w3.org/2000/09/xmldsig#\",\r\n      \"@xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\r\n      \"@id\": \"comprobante\",\r\n      \"@version\": \"1.0.0\",\r\n      infoTributaria: reorderTaxInfo(infoTributariaData),\r\n      infoFactura: invoiceData.infoFactura,\r\n      detalles: invoiceData.detalles,\r\n    },\r\n  };\r\n\r\n  return { invoice, accessKey };\r\n}\r\n","export type GenerateAccessKey = {\r\n  date: Date;\r\n  /*\r\n  FACTURA 01\r\n  LIQUIDACIÓN DE COMPRA DE\r\n  BIENES Y PRESTACIÓN DE\r\n  SERVICIOS 03\r\n  NOTA DE CRÉDITO 04\r\n  NOTA DE DÉBITO 05\r\n  GUÍA DE REMISIÓN 06\r\n  COMPROBANTE DE RETENCIÓN 07\r\n  */\r\n  codDoc: \"01\" | \"03\" | \"04\" | \"05\" | \"06\" | \"07\";\r\n  ruc: string;\r\n  environment: \"1\" | \"2\";\r\n  establishment: string;\r\n  emissionPoint: string;\r\n  sequential: string;\r\n};\r\n\r\nexport function generateAccessKey(accessKeyData: GenerateAccessKey) {\r\n  let accessKey = \"\";\r\n  accessKey += formatDateToDDMMYYYY(accessKeyData.date); // Fecha de emisión\r\n  accessKey += accessKeyData.codDoc; // Tipo de comprobante\r\n  accessKey += accessKeyData.ruc; // Número de RUC\r\n  accessKey += accessKeyData.environment; // Tipo de ambiente\r\n  accessKey += accessKeyData.establishment; // Establecimiento\r\n  accessKey += accessKeyData.emissionPoint; // Punto de emision\r\n  accessKey += accessKeyData.sequential; // Secuencial\r\n  accessKey += generateRandomEightDigitNumber(); // Código numérico\r\n  accessKey += \"1\"; // Tipo de emisión\r\n  accessKey += generateVerificatorDigit(accessKey); // Dígito verificador\r\n  return accessKey;\r\n}\r\n\r\nfunction formatDateToDDMMYYYY(date: Date): string {\r\n  const day = String(date.getDate()).padStart(2, \"0\"); // Día con cero a la izquierda\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Mes con cero a la izquierda\r\n  const year = date.getFullYear(); // Año completo (4 dígitos)\r\n\r\n  return `${day}${month}${year}`;\r\n}\r\n\r\nfunction generateRandomEightDigitNumber(): number {\r\n  const min = 10000000;\r\n  const max = 99999999;\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction generateVerificatorDigit(accessKey: string) {\r\n  const weights = [2, 3, 4, 5, 6, 7]; // Pesos cíclicos estándar\r\n  const digits = accessKey.split(\"\").map(Number); // Convertir a un array de dígitos\r\n\r\n  // Validar que todos los caracteres sean numéricos\r\n  if (digits.some(isNaN)) {\r\n    throw new Error(\"Invalid access key. Must contain only digits.\");\r\n  }\r\n\r\n  // Calcular la suma ponderada\r\n  const total = digits\r\n    .reverse() // Procesar de derecha a izquierda\r\n    .map((digit, index) => digit * weights[index % weights.length]) // Multiplicar por pesos\r\n    .reduce((sum, value) => sum + value, 0); // Sumar los productos\r\n\r\n  // Calcular el residuo\r\n  const remainder = total % 11;\r\n\r\n  // Calcular el dígito verificador\r\n  let verifier = 11 - remainder;\r\n\r\n  // Ajustar casos especiales\r\n  if (verifier === 10) verifier = 1;\r\n  if (verifier === 11) verifier = 0;\r\n\r\n  return verifier;\r\n}\r\n","import { createClient, Client } from \"soap\";\r\n\r\nexport async function documentReception(\r\n  stringXML: string,\r\n  receptionUrl: string\r\n): Promise<any> {\r\n  const base64XML = Buffer.from(stringXML).toString(\"base64\");\r\n  let params = { xml: base64XML };\r\n\r\n  let receptionResult: any;\r\n\r\n  const receptionRequest = new Promise((resolve, reject) => {\r\n    createClient(receptionUrl, (err, client: Client) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      client.validarComprobante(params, (err: any, result: unknown) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(result);\r\n      });\r\n    });\r\n  });\r\n\r\n  receptionResult = await receptionRequest;\r\n  return receptionResult;\r\n}\r\n","import * as forge from \"node-forge\";\r\nimport { readFileSync } from \"fs\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport function getP12FromLocalFile(path: string) {\r\n  const file = readFileSync(path);\r\n  const buffer = file.buffer.slice(file.byteOffset, file.byteOffset + file.byteLength);\r\n  return buffer;\r\n}\r\n\r\nexport async function getP12FromUrl(url: string) {\r\n  const file = await fetch(url)\r\n    .then((response) => response.arrayBuffer())\r\n    .then((data) => data);\r\n  return file;\r\n}\r\n\r\nexport function getXMLFromLocalFile(path: string) {\r\n  const file = readFileSync(path, \"utf8\");\r\n  return file;\r\n}\r\n\r\nexport async function getXMLFromLocalUrl(url: string) {\r\n  const file = await fetch(url)\r\n    .then((response) => response.text())\r\n    .then((data) => data);\r\n  return file;\r\n}\r\n\r\nfunction sha1Base64(text: string, encoding: forge.Encoding = \"utf8\") {\r\n  let md = forge.md.sha1.create();\r\n  md.update(text, encoding);\r\n  const hash = md.digest().toHex();\r\n  const buffer = Buffer.from(hash, \"hex\");\r\n  const base64 = buffer.toString(\"base64\");\r\n  return base64;\r\n}\r\n\r\nfunction hexToBase64(hex: string) {\r\n  hex = hex.padStart(hex.length + (hex.length % 2), \"0\");\r\n  const bytes = hex.match(/.{2}/g)!.map((byte) => parseInt(byte, 16));\r\n  return btoa(String.fromCharCode(...bytes));\r\n}\r\n\r\nfunction bigIntToBase64(bigInt: number) {\r\n  const hex = bigInt.toString(16);\r\n  const hexPairs = hex.match(/\\w{2}/g);\r\n  const bytes = hexPairs!.map((pair) => parseInt(pair, 16));\r\n  const byteString = String.fromCharCode(...bytes);\r\n  const base64 = btoa(byteString);\r\n  const formatedBase64 = base64.match(/.{1,76}/g)!.join(\"\\n\");\r\n  return formatedBase64;\r\n}\r\n\r\nfunction getRandomNumber(min = 990, max = 9999) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport async function signXml(p12Data: ArrayBuffer, p12Password: string, xmlData: string) {\r\n  const arrayBuffer = p12Data;\r\n  let xml = xmlData;\r\n  xml = xml.replace(/\\s+/g, \" \");\r\n  xml = xml.trim();\r\n  xml = xml.replace(/(?<=\\>)(\\r?\\n)|(\\r?\\n)(?=\\<\\/)/g, \"\");\r\n  xml = xml.trim();\r\n  xml = xml.replace(/(?<=\\>)(\\s*)/g, \"\");\r\n\r\n  const arrayUint8 = new Uint8Array(arrayBuffer);\r\n  const base64 = forge.util.binary.base64.encode(arrayUint8);\r\n  const der = forge.util.decode64(base64);\r\n\r\n  const asn1 = forge.asn1.fromDer(der);\r\n  const p12 = forge.pkcs12.pkcs12FromAsn1(asn1, p12Password);\r\n  const pkcs8Bags = p12.getBags({\r\n    bagType: forge.pki.oids.pkcs8ShroudedKeyBag,\r\n  });\r\n  const certBags = p12.getBags({\r\n    bagType: forge.pki.oids.certBag,\r\n  });\r\n  const certBag = certBags[(forge as any).oids.certBag];\r\n\r\n  console.log(\"certBag![1].attributes =========\", certBag![0].attributes);\r\n\r\n  const friendlyName = certBag![0].attributes.friendlyName[0];\r\n\r\n  let certificate;\r\n  let pkcs8;\r\n  let issuerName = \"\";\r\n\r\n  const cert = certBag!.reduce((prev, curr) => {\r\n    const attributes = curr.cert!.extensions;\r\n    return attributes.length > prev.cert!.extensions.length ? curr : prev;\r\n  });\r\n\r\n  const issueAttributes = cert.cert!.issuer.attributes;\r\n\r\n  issuerName = issueAttributes\r\n    .reverse()\r\n    .map((attribute) => {\r\n      return `${attribute.shortName}=${attribute.value}`;\r\n    })\r\n    .join(\", \");\r\n\r\n  if (/BANCO CENTRAL/i.test(friendlyName)) {\r\n    let keys = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag];\r\n    for (let i = 0; i < keys!.length; i++) {\r\n      const element = keys![i];\r\n      let name = element.attributes.friendlyName[0];\r\n      if (/Signing Key/i.test(name)) {\r\n        pkcs8 = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag[i]];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (/SECURITY DATA/i.test(friendlyName)) {\r\n    pkcs8 = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag]![0];\r\n  }\r\n\r\n  certificate = cert.cert;\r\n\r\n  const notBefore = certificate!.validity[\"notBefore\"];\r\n  const notAfter = certificate!.validity[\"notAfter\"];\r\n  const date = new Date();\r\n\r\n  if (date < notBefore || date > notAfter) {\r\n    throw new Error(\"Expired certificate\");\r\n  }\r\n\r\n  const key = (pkcs8 as any).key ?? (pkcs8 as any).asn1;\r\n  const certificateX509_pem = forge.pki.certificateToPem(certificate!);\r\n\r\n  let certificateX509 = certificateX509_pem;\r\n  certificateX509 = certificateX509.substr(certificateX509.indexOf(\"\\n\"));\r\n  certificateX509 = certificateX509.substr(0, certificateX509.indexOf(\"\\n-----END CERTIFICATE-----\"));\r\n\r\n  certificateX509 = certificateX509.replace(/\\r?\\n|\\r/g, \"\").replace(/([^\\0]{76})/g, \"$1\\n\");\r\n\r\n  const certificateX509_asn1 = forge.pki.certificateToAsn1(certificate!);\r\n  const certificateX509_der = forge.asn1.toDer(certificateX509_asn1).getBytes();\r\n  const hash_certificateX509_der = sha1Base64(certificateX509_der, \"utf8\");\r\n  const certificateX509_serialNumber = parseInt(certificate!.serialNumber, 16);\r\n\r\n  const exponent = hexToBase64(key.e.data[0].toString(16));\r\n  const modulus = bigIntToBase64(key.n);\r\n\r\n  xml = xml.replace(/\\t|\\r/g, \"\");\r\n\r\n  const sha1_xml = sha1Base64(xml.replace('<?xml version=\"1.0\" encoding=\"UTF-8\"?>', \"\"), \"utf8\");\r\n\r\n  const nameSpaces = 'xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:etsi=\"http://uri.etsi.org/01903/v1.3.2#\"';\r\n\r\n  const certificateNumber = getRandomNumber();\r\n  const signatureNumber = getRandomNumber();\r\n  const signedPropertiesNumber = getRandomNumber();\r\n  const signedInfoNumber = getRandomNumber();\r\n  const signedPropertiesIdNumber = getRandomNumber();\r\n  const referenceIdNumber = getRandomNumber();\r\n  const signatureValueNumber = getRandomNumber();\r\n  const objectNumber = getRandomNumber();\r\n\r\n  const isoDateTime = date.toISOString().slice(0, 19);\r\n\r\n  let signedProperties = \"\";\r\n  signedProperties += '<etsi:SignedProperties Id=\"Signature' + signatureNumber + \"-SignedProperties\" + signedPropertiesNumber + '\">';\r\n\r\n  signedProperties += \"<etsi:SignedSignatureProperties>\";\r\n  signedProperties += \"<etsi:SigningTime>\";\r\n  signedProperties += isoDateTime;\r\n  signedProperties += \"</etsi:SigningTime>\";\r\n  signedProperties += \"<etsi:SigningCertificate>\";\r\n  signedProperties += \"<etsi:Cert>\";\r\n  signedProperties += \"<etsi:CertDigest>\";\r\n  signedProperties += '<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\r\n  signedProperties += \"</ds:DigestMethod>\";\r\n  signedProperties += \"<ds:DigestValue>\";\r\n  signedProperties += hash_certificateX509_der;\r\n  signedProperties += \"</ds:DigestValue>\";\r\n  signedProperties += \"</etsi:CertDigest>\";\r\n  signedProperties += \"<etsi:IssuerSerial>\";\r\n  signedProperties += \"<ds:X509IssuerName>\";\r\n  signedProperties += issuerName;\r\n  signedProperties += \"</ds:X509IssuerName>\";\r\n  signedProperties += \"<ds:X509SerialNumber>\";\r\n  signedProperties += certificateX509_serialNumber;\r\n  signedProperties += \"</ds:X509SerialNumber>\";\r\n  signedProperties += \"</etsi:IssuerSerial>\";\r\n  signedProperties += \"</etsi:Cert>\";\r\n  signedProperties += \"</etsi:SigningCertificate>\";\r\n  signedProperties += \"</etsi:SignedSignatureProperties>\";\r\n\r\n  signedProperties += \"<etsi:SignedDataObjectProperties>\";\r\n  signedProperties += '<etsi:DataObjectFormat ObjectReference=\"#Reference-ID=' + referenceIdNumber + '\">';\r\n  signedProperties += \"<etsi:Description>\";\r\n  signedProperties += \"contenido comprobante\";\r\n  signedProperties += \"</etsi:Description>\";\r\n  signedProperties += \"<etsi:MimeType>\";\r\n  signedProperties += \"text/xml\";\r\n  signedProperties += \"</etsi:MimeType>\";\r\n  signedProperties += \"</etsi:DataObjectFormat>\";\r\n  signedProperties += \"</etsi:SignedDataObjectProperties>\";\r\n  signedProperties += \"</etsi:SignedProperties>\";\r\n\r\n  const sha1SignedProperties = sha1Base64(signedProperties.replace(\"<ets:SignedProperties\", \"<etsi:SignedProperties \" + nameSpaces), \"utf8\");\r\n\r\n  let keyInfo = \"\";\r\n  keyInfo += '<ds:KeyInfo Id=\"Certificate' + certificateNumber + '\">';\r\n  keyInfo += \"\\n<ds:X509Data>\";\r\n  keyInfo += \"\\n<ds:X509Certificate>\\n\";\r\n  keyInfo += certificateX509;\r\n  keyInfo += \"\\n</ds:X509Certificate>\";\r\n  keyInfo += \"\\n</ds:X509Data>\";\r\n  keyInfo += \"\\n<ds:KeyValue>\";\r\n  keyInfo += \"\\n<ds:RSAKeyValue>\";\r\n  keyInfo += \"\\n<ds:Modulus>\\n\";\r\n  keyInfo += modulus;\r\n  keyInfo += \"\\n</ds:Modulus>\";\r\n  keyInfo += \"\\n<ds:Exponent>\\n\";\r\n  keyInfo += exponent;\r\n  keyInfo += \"\\n</ds:Exponent>\";\r\n  keyInfo += \"\\n</ds:RSAKeyValue>\";\r\n  keyInfo += \"\\n</ds:KeyValue>\";\r\n  keyInfo += \"\\n</ds:KeyInfo>\";\r\n\r\n  const sha1KeyInfo = sha1Base64(keyInfo.replace(\"<ds:KeyInfo\", \"<ds:KeyInfo \" + nameSpaces), \"utf8\");\r\n\r\n  let signedInfo = \"\";\r\n  signedInfo += '<ds:SignedInfo Id=\"Signature-SignedInfo' + signedInfoNumber + '\">';\r\n  signedInfo += '\\n<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\">';\r\n  signedInfo += \"</ds:CanonicalizationMethod>\";\r\n  signedInfo += '\\n<ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\">';\r\n  signedInfo += \"</ds:SignatureMethod>\";\r\n  signedInfo +=\r\n    '\\n<ds:Reference Id=\"SignedPropertiesID' +\r\n    signedPropertiesIdNumber +\r\n    '\" Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#Signature' +\r\n    signatureNumber +\r\n    \"-SignedProperties\" +\r\n    signedPropertiesNumber +\r\n    '\">';\r\n  signedInfo += '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\r\n  signedInfo += \"</ds:DigestMethod>\";\r\n  signedInfo += \"\\n<ds:DigestValue>\";\r\n  signedInfo += sha1SignedProperties;\r\n  signedInfo += \"</ds:DigestValue>\";\r\n  signedInfo += \"\\n</ds:Reference>\";\r\n  signedInfo += '\\n<ds:Reference URI=\"#Certificate' + certificateNumber + '\">';\r\n  signedInfo += '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\r\n  signedInfo += \"</ds:DigestMethod>\";\r\n  signedInfo += \"\\n<ds:DigestValue>\";\r\n  signedInfo += sha1KeyInfo;\r\n  signedInfo += \"</ds:DigestValue>\";\r\n  signedInfo += \"\\n</ds:Reference>\";\r\n\r\n  signedInfo += '\\n<ds:Reference Id=\"Reference-ID' + referenceIdNumber + '\" URI=\"#comprobante\">';\r\n  signedInfo += \"\\n<ds:Transforms>\";\r\n  signedInfo += '\\n<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmlndsig#enveloped-signature\">';\r\n  signedInfo += \"</ds:Transform>\";\r\n  signedInfo += \"\\n</ds:Transforms>\";\r\n  signedInfo += '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\r\n  signedInfo += \"</ds:DigestMethod>\";\r\n  signedInfo += \"\\n<ds:DigestValue>\";\r\n  signedInfo += sha1_xml;\r\n  signedInfo += \"</ds:DigestValue>\";\r\n  signedInfo += \"\\n</ds:Reference>\";\r\n\r\n  signedInfo += \"\\n</ds:SignedInfo>\";\r\n\r\n  const canonicalizedSignedInfo = signedInfo.replace(\"<ds:SignedInfo\", \"<ds:SignedInfo \" + nameSpaces);\r\n\r\n  const md = forge.md.sha1.create();\r\n  md.update(canonicalizedSignedInfo, \"utf8\");\r\n\r\n  const signature = btoa(\r\n    key\r\n      .sign(md)\r\n      .match(/.{1,76}/g)\r\n      .join(\"\\n\")\r\n  );\r\n\r\n  let xadesBes = \"\";\r\n  xadesBes += \"<ds:Signature \" + nameSpaces + ' Id=\"Signature' + signatureNumber + '\">';\r\n  xadesBes += \"\\n\" + signedInfo;\r\n\r\n  xadesBes += '\\n<ds:SignatureValue Id=\"SignatureValue' + signatureValueNumber + '\">\\n';\r\n\r\n  xadesBes += signature;\r\n  xadesBes += \"\\n</ds:SignatureValue>\";\r\n  xadesBes += \"\\n\" + keyInfo;\r\n  xadesBes += '\\n<ds:Object Id=\"Signature' + signatureNumber + \"-Object\" + objectNumber + '\">';\r\n\r\n  xadesBes += '<etsi:QualifyingProperties Target=\"#Signature' + signatureNumber + '\">';\r\n  xadesBes += signedProperties;\r\n\r\n  xadesBes += \"</etsi:QualifyingProperties>\";\r\n  xadesBes += \"</ds:Object>\";\r\n  xadesBes += \"</ds:Signature>\";\r\n\r\n  return xml.replace(/(<[^<]+)$/, xadesBes + \"$1\");\r\n}\r\n"],"mappings":"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","names":["err","taxInfo","createClient","err","md","asn1"]}